title: Bokeh 0.12.6 Released
---
summary:

@todo

---
pub_date: 2017-07-12
---
author: Luke Canavan
---
twitter_handle: canavandl
---
body:

#### text-block ####
text:

### Introduction

In web development, it's typical to confine your business logic into JS files,
your layout into HTML templates, and your styling into CSS files. This
decoupling makes navigating and working on a code base easier. In Bokeh,
there's similar value to decoupling the styles of your Models from the
business logic that generates them. For example, if you want to change the
tick interval of an axis or outline color of a Circle glyph, it should be
immediately obvious where the appropriate code to modify is.

I've found two general patterns for grouping styling code in my experience of
creating Bokeh visualizations that I'll share in this post.

### Using Styling Dictionaries

One solution is to create a sidecar python module containing all of my styles
(I generally call it "styles.py") that contains dictionaries of Bokeh style
properties. Here's an example on one:

```python
### contents of styles.py

from bokeh.models import BasicTicker, PrintfTickFormatter

DARK_GRAY = "#282828"
BROWN_GRAY = "#49483E"

PLOT_OPTS = dict(
  background_fill_color=DARK_GRAY,
  border_fill_color=DARK_GRAY,
  outline_line_color=BROWN_GRAY
)

AXIS_OPTS = dict(
  axis_label_standoff=10,
  axis_label_text_font_size="15pt",
  axis_line_color=BROWN_GRAY,
  ticker=BasicTicker(num_minor_ticks=2),
  formatter=PrintfTickFormatter(format="%4.1e")
)

```

I'll even include some Bokeh Models like Tickers and Formatters that are
responsible for are styling elements and aren't implementing business logic.
From visualization to visualization these can change - sometimes colors are
manually chosen and should be in a styles dict while other times they're
dynamically computed based on data values and should stay in the business logic.
Then I'll splat these style dictionaries into the appropriate Models when
creating them. This allow for creating reusable styles across different model
instances, i.e. all of the axes look the same.

```
from bokeh.models import Plot, Range1d, LinearAxis
from .styles import PLOT_OPTS, AXIS_OPTS

plot = Plot(x_range=Range1d(), y_range=Range1d(), **PLOT_OPTS)
plot.add_layout(
  LinearAxis(**AXIS_OPTS), "left"
)
plot.add_layout(
  LinearAxis(**AXIS_OPTS), "below"
)

```

### Using Bokeh Themes

The alternative to using styling dictionaries is creating Bokeh Themes. Themes
are a specification for creating custom defaults for Bokeh Models via a YAML
file or a JSON. I think that Themes are a fantastic way to maintaining a
consistent style across a larger set of visualizations because you don't have
to remember to explicitly add styles to individual models. Here's an example of
a theme file:

contents of theme.yaml
```yaml
attrs:
    Plot:
        background_fill_color: "#282828"
        border_fill_color: "#282828"
        outline_line_color: "#49483E"
    Axis:
        axis_label_standoff: 10
        axis_label_text_font_size="15pt"
        axis_line_color: "#49483E"
    BasicTicker:
        num_minor_ticks: 2
    PrintfTickFormatter:
        format: "%4.1e"

```

Then you simply attach the theme to the Document and all of the custom styles
are applied to the appropriate models. You can read more about Themes in the
[documentation](http://bokeh.pydata.org/en/latest/docs/reference/themes.html#bokeh-themes).

```python
from bokeh.theme import Theme

theme = Theme(filename="./theme.yaml")

doc = Document(theme=theme)
### or Document().theme = theme
doc.add_root(plot)

```

### When to use styling dictionaries or Themes?

The benefit of using style dictionaries are their simplicity. You don't have to
deal with Documents or Themes, just simple python dictionaries. I've used this
approach when embedding smaller layouts via the ``bokeh.embed.components`` in
other applications like Django web apps. If you're creating Bokeh Server
applications, you're generally deal with Documents anyway, so it's less of a
convenience.

Also, styling dictionary approach seems to work best when developing via the
``bokeh.models`` API where you're explicitly creating and adding all of your
models. You can read my previous blog post about how that works
[here](https://bokeh.github.io/blog/2017/7/5/idiomatic_bokeh/). In the
``bokeh.plotting`` API some plot components, like axes for example, are
implicitly created inside the ``figure`` method. This is where Themes are
probably a better solution because they will automatically propagate to all of
the appropriate models inside of your Document.

What if you want different styles for the same model type? It's possible to
have different style dictionaries that you splat in by having unique
``X_AXIS_OPTS`` and ``Y_AXIS_OPTS`` dicts  for a LinearAxis model. Alternatively,
since Themes just change the model defaults, it's possible to override the new
defaults however you normally would. It's even possible to combine both the
styling dicts and Themes approach to styling Bokeh visualizations, but I'd
recommend doing so in very limited cases because the whole point was to isolate
your styles into a single location.

Finally, themes are easier to share with others. I've created a gist [add link]
that contains a Monokai Dark-inspired theme that I've created. You should be
able to download or copy and paste it into a file an attach to any visualization
you already have.

### Quick styling tips

Here are some assorted styling tips

* If you want your html body (or whatever container) style to be visible
behind your plots, set the Plot ``background_fill_color`` and
``border_fill_color`` attributes to ``None``.

* If you want to add custom CSS to your layout (i.e. in order to change the html
body background color) you can **** or you can specify a custom template for
your Document and either inline or load your custom CSS there.

### Conclusion

@todo

----
class: default
